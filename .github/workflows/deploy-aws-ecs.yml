name: Deploy to AWS ECS

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: loan-backend
  ECS_SERVICE: loan-backend-service
  ECS_CLUSTER: loan-backend-cluster
  ECS_TASK_DEFINITION: loan-backend

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci
        npm cache clean --force

    - name: Run tests
      run: npm test

    - name: Run linting
      run: npm run lint || true

    - name: Type checking
      run: npx tsc --noEmit

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build Docker image
        docker build -f Dockerfile.prod -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker build -f Dockerfile.prod -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .

        # Push to ECR
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Download task definition
      run: |
        aws ecs describe-task-definition \
          --task-definition $ECS_TASK_DEFINITION \
          --query taskDefinition > task-definition.json

    - name: Update task definition image
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: loan-backend
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy to Amazon ECS
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true

    - name: Verify deployment
      run: |
        echo "Deployment completed successfully!"
        echo "Service status:"
        aws ecs describe-services --cluster $ECS_CLUSTER --services $ECS_SERVICE

    - name: Health check
      run: |
        echo "Waiting for service to be stable..."
        aws ecs wait services-stable --cluster $ECS_CLUSTER --services $ECS_SERVICE
        
        # Get load balancer DNS and test health endpoint
        ALB_DNS=$(aws elbv2 describe-load-balancers --region $AWS_REGION --query 'LoadBalancers[?contains(LoadBalancerName, `loan-backend-alb`)].DNSName' --output text)
        if [ -n "$ALB_DNS" ] && [ "$ALB_DNS" != "None" ]; then
          echo "Load Balancer DNS: $ALB_DNS"
          echo "Testing health endpoint..."
          sleep 30  # Wait for service to be fully ready
          if curl -f "http://$ALB_DNS/health" > /dev/null 2>&1; then
            echo "✅ Health check passed!"
          else
            echo "⚠️ Health check failed - this might be normal during startup"
          fi
        else
          echo "⚠️ Could not retrieve load balancer DNS"
        fi
